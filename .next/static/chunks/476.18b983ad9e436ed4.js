"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[476],{1476:function(e,t,r){r.r(t);class a{constructor(){this.memoryStorage=new Map,this.isLocalStorageAvailable=this.checkStorageAvailability("localStorage"),this.isSessionStorageAvailable=this.checkStorageAvailability("sessionStorage"),this.isIndexedDBAvailable=this.checkIndexedDBAvailability(),this.dbName="CigarMaestroApp",this.dbVersion=1,this.db=null,this.expirationToleranceMs=1}checkStorageAvailability(e){try{let t=window[e];if(!t)return!1;let r="__storage_test__";try{t.setItem(r,"test")}catch(e){return!1}return t.removeItem(r),!0}catch(e){return!1}}checkIndexedDBAvailability(){let e=window;return!!(e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB)}async initIndexedDB(){return!this.isIndexedDBAvailable||this.db?this.db:new Promise((e,t)=>{let r=indexedDB.open(this.dbName,this.dbVersion);r.onerror=()=>t(r.error),r.onsuccess=()=>{this.db=r.result,e(this.db)},r.onupgradeneeded=e=>{let t=e.target.result;t.objectStoreNames.contains("userData")||t.createObjectStore("userData",{keyPath:"id"}),t.objectStoreNames.contains("cigarData")||t.createObjectStore("cigarData",{keyPath:"id"}),t.objectStoreNames.contains("preferences")||t.createObjectStore("preferences",{keyPath:"key"}),t.objectStoreNames.contains("cache")||t.createObjectStore("cache",{keyPath:"url"}).createIndex("timestamp","timestamp",{unique:!1})}})}setLocal(e,t,r=null){if(!this.isLocalStorageAvailable)return this.setMemory(e,t,r);try{let a={value:t,timestamp:Date.now(),expiration:r?Date.now()+r:null};return localStorage.setItem(e,JSON.stringify(a)),!0}catch(a){try{return this.setMemory(e,t,r)}catch(e){return!1}}}getLocal(e){if(!this.isLocalStorageAvailable)return this.getMemory(e);try{let t=localStorage.getItem(e);if(!t)return null;let r=JSON.parse(t);if(r.expiration&&Date.now()>=r.expiration-this.expirationToleranceMs)return localStorage.removeItem(e),null;return r.value}catch(e){return null}}removeLocal(e){if(!this.isLocalStorageAvailable)return this.removeMemory(e);try{return localStorage.removeItem(e),!0}catch(e){return!1}}setSession(e,t){if(!this.isSessionStorageAvailable)return this.setMemory(e,t);try{return sessionStorage.setItem(e,JSON.stringify(t)),!0}catch(e){return!1}}getSession(e){if(!this.isSessionStorageAvailable)return this.getMemory(e);try{let t=sessionStorage.getItem(e);return t?JSON.parse(t):null}catch(e){return null}}async setIndexedDB(e,t){try{if(await this.initIndexedDB(),!this.db)return!1;let r=this.db.transaction([e],"readwrite").objectStore(e);return await new Promise((e,a)=>{let i=r.put(t);i.onsuccess=()=>e(),i.onerror=()=>a(i.error)}),!0}catch(e){return!1}}async getIndexedDB(e,t){try{if(await this.initIndexedDB(),!this.db)return null;let r=this.db.transaction([e],"readonly").objectStore(e);return new Promise((e,a)=>{let i=r.get(t);i.onsuccess=()=>e(i.result),i.onerror=()=>a(i.error)})}catch(e){return null}}setMemory(e,t,r=null){return this.memoryStorage.set(e,{value:t,timestamp:Date.now(),expiration:r?Date.now()+r:null}),!0}getMemory(e){let t=this.memoryStorage.get(e);return t?t.expiration&&Date.now()>=t.expiration-this.expirationToleranceMs?(this.memoryStorage.delete(e),null):t.value:null}removeMemory(e){return this.memoryStorage.delete(e)}async cacheData(e,t,r=36e5){let a={url:e,data:t,timestamp:Date.now(),expiration:Date.now()+r};await this.setIndexedDB("cache",a)||this.setLocal(`cache_${e}`,a,r)}async getCachedData(e){let t=await this.getIndexedDB("cache",e);if(t||(t=this.getLocal(`cache_${e}`)),!t)return null;let r=t.expiration??t?.data?.expiration;return r&&Date.now()>=r-this.expirationToleranceMs?null:t.data??t}async setPreference(e,t){await this.setIndexedDB("preferences",{key:e,value:t})||this.setLocal(`pref_${e}`,t)}async getPreference(e,t=null){let r=await this.getIndexedDB("preferences",e);if(!r){let r=this.getLocal(`pref_${e}`);return null!==r?r:t}return void 0!==r.value?r.value:t}async clearAll(){this.isLocalStorageAvailable&&localStorage.clear(),this.isSessionStorageAvailable&&sessionStorage.clear(),this.db&&(this.db.close(),await new Promise((e,t)=>{let r=indexedDB.deleteDatabase(this.dbName);r.onsuccess=()=>e(),r.onerror=()=>t(r.error)}),this.db=null),this.memoryStorage.clear()}async exportData(){let e={localStorage:{},preferences:[],userData:[],timestamp:Date.now()};if(this.isLocalStorageAvailable)for(let t=0;t<localStorage.length;t++){let r=localStorage.key(t);e.localStorage[r]=localStorage.getItem(r)}if(this.db)try{let t=this.db.transaction(["preferences","userData"],"readonly"),r=t.objectStore("preferences");e.preferences=await new Promise((e,t)=>{let a=r.getAll();a.onsuccess=()=>e(a.result),a.onerror=()=>t(a.error)});let a=t.objectStore("userData");e.userData=await new Promise((e,t)=>{let r=a.getAll();r.onsuccess=()=>e(r.result),r.onerror=()=>t(r.error)})}catch(e){}return e}async importData(e){if(!e||"object"!=typeof e)throw Error("Invalid import data");if(e.localStorage&&this.isLocalStorageAvailable)for(let[t,r]of Object.entries(e.localStorage))localStorage.setItem(t,r);if(await this.initIndexedDB(),this.db)try{if(e.preferences&&Array.isArray(e.preferences))for(let t of e.preferences)await this.setIndexedDB("preferences",t);if(e.userData&&Array.isArray(e.userData))for(let t of e.userData)await this.setIndexedDB("userData",t)}catch(e){throw e}}}let i=new a;t.default=i}}]);